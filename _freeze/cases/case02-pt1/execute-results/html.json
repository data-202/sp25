{
  "hash": "81f9acac0a6841e8d7d5b0eb952af9c1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Case Study 2, Part 1: The True Size of Africa\"\nsubtitle: \"DATA 202 - Alexander\"\nformat: \n  html:\n    self-contained: true\n    self-contained-math: true\neditor: visual\n---\n\n\n\n\nIn Case Study 2, we will explore the social politics of maps and globally oriented data to help us make sense of what we mean by a \"population.\" The case study will integrate a series of new packages, functions, and code to support our explorations.\n\nThere are two parts to this case study, this is part 1.\n\n## Learning Objectives\n\nIn this case study component, you will be introduced to the `dplyr` package, which is one of the many packages in the [`tidyverse`](https://www.tidyverse.org/). The `tidyverse` is a set of packages that will be used for cleaning and organizing data.\n\n------------------------------------------------------------------------\n\n## Learning Activities\n\nBy the end of this case study you will be able to:\n\n1.  Install and/or update R packages\n2.  Assign data frames to different names for efficient exploration\n3.  Generate a set of outputs using the [`dplyr`](https://dplyr.tidyverse.org/) package\n4.  Overwrite a data frame while using the [pipe operator](https://style.tidyverse.org/pipes.html)\n5.  Produce simple plots using data located in an `R` package\n\n## Developing a workflow\n\nCoding workflows are an essential component of project completion.\n\nWhen analyzing data, it is important to understand the possible intersections between the `context`, `content`, and `code`. The best way to explore these relationships is by conducting a literature review. Reading about what others have done is more valuable than starting a workflow prematurely.\n\nTime may be used inefficiently and clear but standard outputs provide narratives that can likely be confirmed by or support what is already in the research literature. Without an understanding of these connections, analytic outputs may do less to move our understanding of issues forward.\n\nThis case study will help you explore and create your own workflow. The goal of a coding workflow is not to simply `copy` and `paste` arguments that you find. Instead, you want to develop clear pathways to identifying solutions as you work with your data.\n\nThe topics in case study 2 cover one way to approach a new data set. In this case study, you'll cover how to load data from a package, generate a set of outputs using small code chunks, and produce and submit a few simple plots.\n\n------------------------------------------------------------------------\n\n# Part 0: Pre-case study tasks\n\n-   Check your working directory\n\n-   Start a new R Script\n\n-   Write a preamble\n\n-   Install and/or update packages and load libraries\n\n## Task 0.1: Check your working directory\n\nIn your console, type in the following code to ensure you are in the desired directory:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\n\n\nIf you are not in the desired directory, you can change your directory using the associated path. This path should be the same as the project folder that you plan to work out of and set up in lecture five.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# insert your desired path in the parenthesis and remove the #\n# setwd(\"/your/working/directory/goes/here\") \n```\n:::\n\n\n\n\nYou can add a new sub-folder manually or under the **Files** tab in the RStudio IDE.\n\n## Task 0.2: Start a new RMarkdown file\n\nOnce you have confirmed that you are in the correct directory, start a new RMarkdown file (.Rmd) and write your preamble.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n---\ntitle: \"Case Study 2\"\nauthor: \"Your Full Name\"\ndate: \"2024-09-09\"\noutput:\n  pdf_document: default\n  html_document:\n    theme: flatly\neditor_options:\n  markdown:\n  wrap: sentence\n ---\n```\n:::\n\n\n\n\n## Task 0.3: Write setup code chunks\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ```{r, eval=F}\n# install.packages(\"devtools\")\n# library(devtools)\n```\n:::\n\n\n\n\n## Task 0.4: Packages and libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install package\n# install.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\")\n# install.packages(\"remotes\", repos = \"http://cran.us.r-project.org\")\n \n# load the necessary libraries\nlibrary(tidyverse) #collection of R packages designed for data science\nlibrary(dplyr)\nlibrary(remotes)\n```\n:::\n\n\n\n\nThe `dplyr` package supports data analyst with efficient data manipulation. As a part of the `tidyverse` package, the functions included in `dplyr` we loaded earlier will help you generate efficient workflows. Though, in reality, most analysts transition between classic code found widely on the internet and the more recent `dplyr` commands.\n\nThe `remotes` library will allow you to remotely install `critstats` data.\n\n------------------------------------------------------------------------\n\n# Part 1: The true size of Africa\n\nIn this part of the case study, you will complete the following tasks:\n\n-   Explore notes on the social politics of maps\n\n-   Examine the `true_size` data in the `critstats` package\n\n-   Construct a response to the issue of misrepresentation in maps\n\n![The world's continents. Image from Encyclopedia Britannica.](../img/lab1-continents.jpg){width=\"50%\"}\n\n## Task 1.1: Explore notes on the social politics of maps\n\n-   [What is a map?](https://education.nationalgeographic.org/resource/map/#:~:text=Maps%20present%20information%20about%20the,features%2C%20and%20distances%20between%20places) This *National Geographic* education resource presents a clear overview of maps, geography, and Geographic Information Systems (GIS).\n\n-   [What's the real size of Africa?](https://www.cnn.com/2016/08/18/africa/real-size-of-africa/index.html) is a CNN Africa Marketplace article that examines the Western foundations of maps and representations of the African continent.\n\n-   [Vaughan (2018)](https://www.jstor.org/stable/j.ctv550dcj) is an open access publication on the *spatial dimensions of social cartography*. The text contains valuable information about how maps have been used to understand health and human development issues, such as poverty, disease, housing, and the like. The text also contains notes on race and nationality, crime and disorder, and a host of references for further reading.\n\n-   [Manson & Matson (2017)](https://open.lib.umn.edu/mapping/chapter/1-maps-society-and-technology/) present an overview of society and mapping with new technological tools. While doing so, the authors provide a history of maps and examine the basic social elements of maps, the technical elements of maps, and how maps have been integrated into liberal arts education.\n\n-   [Crampton (2015)](https://press.uchicago.edu/books/HOC/HOC_V6/HOC_VOLUME6_R.pdf) writes on *Maps and the Social Construction of Race* in a larger volume on maps produced by the University of Chicago Press.\n\n-   [Alderman & Inwood (2021)](https://theconversation.com/how-black-cartographers-put-racism-on-the-map-of-america-155081) describe how Black cartographers use maps to examine issues of racial inequality. The authors provide a more focused discussion on the social politics of maps, as opposed to a more general overview of their functions.\n\n-   [Can maps be racist?](https://sociologyinfocus.com/your-map-is-racist-and-heres-how-2/) Palmer (2014) provides some context to understand the technical aspects of maps as they relate to our social construction of the global world. In this review, the author situates the common functions of maps onto the social dimensions while attending to the particular periods of the development and construction of global maps; thus integrating the political dimension of knowledge creation via map making.\n\n    -- [Britton (2021)](https://areomagazine.com/2021/03/08/in-defence-of-the-mercator-projection-the-non-racism-of-maps/) in a blog post on the \"non-racism of maps\" offers a very different perspective on the Mercator projection. The author focuses on ideology and science in modern society. He argues that the original purpose of maps does not make them racist.\n\n-   [How maps distort our perception of the world](https://the-ard.com/2023/06/09/the-mercator-projection-and-how-maps-distort-the-world/) is a short and focused resource written by Lee (2023) on the Anti-Racism Daily site. The author focuses on the social politics of perception.\n\n![The world's continents. Image from https://www.visualcapitalist.com/map-true-size-of-africa/](../img/lab1-truesize.jpg){width=\"75%\"}\n\n## Task 1.2: Load the `true_size` data\n\n### Task 1.2.1: Install the `critstats` package\n\nTo begin, we will install and/or update the installation of `critstats`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# use the remote install function to call in your data\nremotes::install_github(\"professornaite/critstats\", force=TRUE)\n\n# load the `critstats` library\nlibrary(critstats)\n\n# update the `critstats` package if needed\n# update.packages(\"critstats\")\n```\n:::\n\n\n\n\n### Task 1.2.2: Call the `true_size` data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncritstats::true_size\n```\n:::\n\n\n\n\n### Task 1.2.3: Inspect the `true_size` documentation\n\nUsing the `??data` prompt, you can inspect the contents of the data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??critstats::true_size\n```\n:::\n\n\n\n\nAs noted before, this serves as the data's documentation and is the basis of a code book (or codebook). A codebook contains very specific details about a database, data set, and the variables each contains. We will explore codebooks more in the future.\n\n------------------------------------------------------------------------\n\n## Task 1.3: Explore the `true_size` data\n\n### Task 1.3.1: Assign the `true_size` data frame to `df1`\n\nUse the assignment operator to assign the `true_size` data frame to the object `df1`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 <- critstats::true_size\n```\n:::\n\n\n\n\n### Task 1.3.2: Inspect your data\n\nUse the `str()` function to inspect your data frame.\n\n`str()` displays the structure of R objects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [18 × 4] (S3: tbl_df/tbl/data.frame)\n $ Country       : chr [1:18] \"United States\" \"China\" \"India\" \"Mexico\" ...\n $ percent.africa: num [1:18] 32.4 31.6 10.8 6.5 4.2 2.1 1.7 1.5 1.5 1.3 ...\n $ area.sq.km    : num [1:18] 9.83 9.6 3.29 1.96 1.29 0.64 0.51 0.46 0.45 0.38 ...\n $ area.sq.mi    : num [1:18] 3.8 3.71 1.27 0.76 0.5 0.25 0.2 0.18 0.17 0.15 ...\n```\n\n\n:::\n:::\n\n\n\n\nYou can also run similar commands separately:\n\n#### Task 1.3.2a: `dim()`\n\nUse the `dim()` function to check the dimensions of your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check the dimensions of your data\ndim(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 18  4\n```\n\n\n:::\n:::\n\n\n\n\nNote that the dimensions are reported as a $n \\times m$ matrix with $n$ rows and $m$ columns.\n\n#### Task 1.3.2b: `view()`\n\nUse the `View()` function to see all of your data in a separate window.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view the data\nView(df1)\n```\n:::\n\n\n\n\n#### Task 1.3.2c: `glimpse()`\n\nTake a glimpse of your data using the `glimpse()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get a glimpse of your data frame\nglimpse(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 18\nColumns: 4\n$ Country        <chr> \"United States\", \"China\", \"India\", \"Mexico\", \"Peru\", \"F…\n$ percent.africa <dbl> 32.4, 31.6, 10.8, 6.5, 4.2, 2.1, 1.7, 1.5, 1.5, 1.3, 1.…\n$ area.sq.km     <dbl> 9.83, 9.60, 3.29, 1.96, 1.29, 0.64, 0.51, 0.46, 0.45, 0…\n$ area.sq.mi     <dbl> 3.80, 3.71, 1.27, 0.76, 0.50, 0.25, 0.20, 0.18, 0.17, 0…\n```\n\n\n:::\n:::\n\n\n\n\n#### Task 1.3.2d: `head()`\n\nView the first six observations in your data using the `head()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view the \"top\" of your data\nhead(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Country       percent.africa area.sq.km area.sq.mi\n  <chr>                  <dbl>      <dbl>      <dbl>\n1 United States           32.4       9.83       3.8 \n2 China                   31.6       9.6        3.71\n3 India                   10.8       3.29       1.27\n4 Mexico                   6.5       1.96       0.76\n5 Peru                     4.2       1.29       0.5 \n6 France                   2.1       0.64       0.25\n```\n\n\n:::\n:::\n\n\n\n\n#### Task 1.3.2e: `tail()`\n\nView the last six observations in your data using the `tail()` function.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view the \"bottom\" of your data\ntail(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 4\n  Country        percent.africa area.sq.km area.sq.mi\n  <chr>                   <dbl>      <dbl>      <dbl>\n1 Italy                     1         0.3        0.12\n2 New Zealand               0.9       0.27       0.1 \n3 United Kingdom            0.8       0.24       0.09\n4 Nepal                     0.5       0.15       0.06\n5 Bangladesh                0.5       0.15       0.06\n6 Greece                    0.4       0.13       0.05\n```\n\n\n:::\n:::\n\n\n\n\n#### Task 1.3.2f: Specify `n` in `head()` or `tail()`\n\nYou can change the number of observations viewed by being more explicit in your code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df1, n = 10) # view the top 10 observations\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   Country          percent.africa area.sq.km area.sq.mi\n   <chr>                     <dbl>      <dbl>      <dbl>\n 1 United States              32.4       9.83       3.8 \n 2 China                      31.6       9.6        3.71\n 3 India                      10.8       3.29       1.27\n 4 Mexico                      6.5       1.96       0.76\n 5 Peru                        4.2       1.29       0.5 \n 6 France                      2.1       0.64       0.25\n 7 Spain                       1.7       0.51       0.2 \n 8 Papua New Guinea            1.5       0.46       0.18\n 9 Sweden                      1.5       0.45       0.17\n10 Japan                       1.3       0.38       0.15\n```\n\n\n:::\n\n```{.r .cell-code}\ntail(df1, n = 3) # view the bottom 3 observations\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 4\n  Country    percent.africa area.sq.km area.sq.mi\n  <chr>               <dbl>      <dbl>      <dbl>\n1 Nepal                 0.5       0.15       0.06\n2 Bangladesh            0.5       0.15       0.06\n3 Greece                0.4       0.13       0.05\n```\n\n\n:::\n:::\n\n\n\n\n#### Task 1.3.2g: `summary()`\n\nGet a summary of all variables in the data set.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get a summary of your data frame\nsummary(df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Country          percent.africa     area.sq.km       area.sq.mi    \n Length:18          Min.   : 0.400   Min.   :0.1300   Min.   :0.0500  \n Class :character   1st Qu.: 0.925   1st Qu.:0.2775   1st Qu.:0.1050  \n Mode  :character   Median : 1.400   Median :0.4150   Median :0.1600  \n                    Mean   : 5.556   Mean   :1.6850   Mean   :0.6522  \n                    3rd Qu.: 3.675   3rd Qu.:1.1275   3rd Qu.:0.4375  \n                    Max.   :32.400   Max.   :9.8300   Max.   :3.8000  \n```\n\n\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n## Task 1.4: Use `dplyr` verbs on `true_size`\n\nIn this section, we will review the `dplyr` verbs that help us get our data into a format that works for our analysis. These verbs can be used in any order. We can also use the pipe operator `%>%` and use multiple verbs in a single code chunk.\n\n### Task 1.4.1: Subset columns (variables) using `select()`\n\nThe `select()` command retains only those columns that are listed.\n\nIt uses the logic `select(data, variable1, variable2, ...)`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keep only the Country and percent.africa columns\nselect(df1, Country, percent.africa) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n   Country          percent.africa\n   <chr>                     <dbl>\n 1 United States              32.4\n 2 China                      31.6\n 3 India                      10.8\n 4 Mexico                      6.5\n 5 Peru                        4.2\n 6 France                      2.1\n 7 Spain                       1.7\n 8 Papua New Guinea            1.5\n 9 Sweden                      1.5\n10 Japan                       1.3\n11 Germany                     1.2\n12 Norway                      1.1\n13 Italy                       1  \n14 New Zealand                 0.9\n15 United Kingdom              0.8\n16 Nepal                       0.5\n17 Bangladesh                  0.5\n18 Greece                      0.4\n```\n\n\n:::\n\n```{.r .cell-code}\n# keep only the Country and area.sq.mi columns\nselect(df1, Country, area.sq.mi)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n   Country          area.sq.mi\n   <chr>                 <dbl>\n 1 United States          3.8 \n 2 China                  3.71\n 3 India                  1.27\n 4 Mexico                 0.76\n 5 Peru                   0.5 \n 6 France                 0.25\n 7 Spain                  0.2 \n 8 Papua New Guinea       0.18\n 9 Sweden                 0.17\n10 Japan                  0.15\n11 Germany                0.14\n12 Norway                 0.13\n13 Italy                  0.12\n14 New Zealand            0.1 \n15 United Kingdom         0.09\n16 Nepal                  0.06\n17 Bangladesh             0.06\n18 Greece                 0.05\n```\n\n\n:::\n:::\n\n\n\n\nWe can also subset columns by deleting others\n\nTo do so, we use a minus sign ahead of the column names.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove the area.sq.mi variable\nselect(df1, -area.sq.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 3\n   Country          percent.africa area.sq.mi\n   <chr>                     <dbl>      <dbl>\n 1 United States              32.4       3.8 \n 2 China                      31.6       3.71\n 3 India                      10.8       1.27\n 4 Mexico                      6.5       0.76\n 5 Peru                        4.2       0.5 \n 6 France                      2.1       0.25\n 7 Spain                       1.7       0.2 \n 8 Papua New Guinea            1.5       0.18\n 9 Sweden                      1.5       0.17\n10 Japan                       1.3       0.15\n11 Germany                     1.2       0.14\n12 Norway                      1.1       0.13\n13 Italy                       1         0.12\n14 New Zealand                 0.9       0.1 \n15 United Kingdom              0.8       0.09\n16 Nepal                       0.5       0.06\n17 Bangladesh                  0.5       0.06\n18 Greece                      0.4       0.05\n```\n\n\n:::\n\n```{.r .cell-code}\n# remove the listed variables in the data frame\nselect(df1, -area.sq.km, -area.sq.mi) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 2\n   Country          percent.africa\n   <chr>                     <dbl>\n 1 United States              32.4\n 2 China                      31.6\n 3 India                      10.8\n 4 Mexico                      6.5\n 5 Peru                        4.2\n 6 France                      2.1\n 7 Spain                       1.7\n 8 Papua New Guinea            1.5\n 9 Sweden                      1.5\n10 Japan                       1.3\n11 Germany                     1.2\n12 Norway                      1.1\n13 Italy                       1  \n14 New Zealand                 0.9\n15 United Kingdom              0.8\n16 Nepal                       0.5\n17 Bangladesh                  0.5\n18 Greece                      0.4\n```\n\n\n:::\n:::\n\n\n\n\n### Task 1.4.2: Filter rows (cases) using `filter()`\n\n`filter()` allows us to select rows based on specific criteria.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keep only those rows where the percent.africa value is grater than 30\nfilter(df1, percent.africa > 30)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  Country       percent.africa area.sq.km area.sq.mi\n  <chr>                  <dbl>      <dbl>      <dbl>\n1 United States           32.4       9.83       3.8 \n2 China                   31.6       9.6        3.71\n```\n\n\n:::\n\n```{.r .cell-code}\n# keep only those rows where the percent.africa value is less than 1\nfilter(df1, percent.africa < 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 4\n  Country        percent.africa area.sq.km area.sq.mi\n  <chr>                   <dbl>      <dbl>      <dbl>\n1 New Zealand               0.9       0.27       0.1 \n2 United Kingdom            0.8       0.24       0.09\n3 Nepal                     0.5       0.15       0.06\n4 Bangladesh                0.5       0.15       0.06\n5 Greece                    0.4       0.13       0.05\n```\n\n\n:::\n\n```{.r .cell-code}\n# keep only those rows where percent.africa is less than 10 and greater than 1\nfilter(df1, percent.africa < 10 & percent.africa > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9 × 4\n  Country          percent.africa area.sq.km area.sq.mi\n  <chr>                     <dbl>      <dbl>      <dbl>\n1 Mexico                      6.5       1.96       0.76\n2 Peru                        4.2       1.29       0.5 \n3 France                      2.1       0.64       0.25\n4 Spain                       1.7       0.51       0.2 \n5 Papua New Guinea            1.5       0.46       0.18\n6 Sweden                      1.5       0.45       0.17\n7 Japan                       1.3       0.38       0.15\n8 Germany                     1.2       0.36       0.14\n9 Norway                      1.1       0.32       0.13\n```\n\n\n:::\n\n```{.r .cell-code}\n# keep only those rows where Country is equal to \"China\"\nfilter(df1, Country == \"China\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 4\n  Country percent.africa area.sq.km area.sq.mi\n  <chr>            <dbl>      <dbl>      <dbl>\n1 China             31.6        9.6       3.71\n```\n\n\n:::\n:::\n\n\n\n\nNotice the use of a `==` equal sign when referencing a cell's value. This will become an important component of base logic and analysis when writing code.\n\n### Task 1.4.3: Add/remove columns (variables) using `mutate()`\n\nWe use `mutate()` to create new variables from existing variables.\n\nIt is not clear what `area.sq.mi` and `area.sq.km` refer to in our data. Further inspection and a bit of internet searching will show us that these values are in the millions and that they represent estimates.\n\nWe can transform these as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add a new column with a more accurate label for land area estimate (sq mi)\nmutate(df1, est.square.miles = df1$area.sq.mi * 1000000) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 5\n   Country          percent.africa area.sq.km area.sq.mi est.square.miles\n   <chr>                     <dbl>      <dbl>      <dbl>            <dbl>\n 1 United States              32.4       9.83       3.8           3800000\n 2 China                      31.6       9.6        3.71          3710000\n 3 India                      10.8       3.29       1.27          1270000\n 4 Mexico                      6.5       1.96       0.76           760000\n 5 Peru                        4.2       1.29       0.5            500000\n 6 France                      2.1       0.64       0.25           250000\n 7 Spain                       1.7       0.51       0.2            200000\n 8 Papua New Guinea            1.5       0.46       0.18           180000\n 9 Sweden                      1.5       0.45       0.17           170000\n10 Japan                       1.3       0.38       0.15           150000\n11 Germany                     1.2       0.36       0.14           140000\n12 Norway                      1.1       0.32       0.13           130000\n13 Italy                       1         0.3        0.12           120000\n14 New Zealand                 0.9       0.27       0.1            100000\n15 United Kingdom              0.8       0.24       0.09            90000\n16 Nepal                       0.5       0.15       0.06            60000\n17 Bangladesh                  0.5       0.15       0.06            60000\n18 Greece                      0.4       0.13       0.05            50000\n```\n\n\n:::\n:::\n\n\n\n\n#### Task 1.4.3a: Add new variables using the pipe `%>%`\n\nWe can also use the `pipe` operator to mutate the variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# we can create the same output when using the %>% (pipe)\ndf1 %>%\n  mutate(est.square.miles = df1$area.sq.mi * 1000000) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 5\n   Country          percent.africa area.sq.km area.sq.mi est.square.miles\n   <chr>                     <dbl>      <dbl>      <dbl>            <dbl>\n 1 United States              32.4       9.83       3.8           3800000\n 2 China                      31.6       9.6        3.71          3710000\n 3 India                      10.8       3.29       1.27          1270000\n 4 Mexico                      6.5       1.96       0.76           760000\n 5 Peru                        4.2       1.29       0.5            500000\n 6 France                      2.1       0.64       0.25           250000\n 7 Spain                       1.7       0.51       0.2            200000\n 8 Papua New Guinea            1.5       0.46       0.18           180000\n 9 Sweden                      1.5       0.45       0.17           170000\n10 Japan                       1.3       0.38       0.15           150000\n11 Germany                     1.2       0.36       0.14           140000\n12 Norway                      1.1       0.32       0.13           130000\n13 Italy                       1         0.3        0.12           120000\n14 New Zealand                 0.9       0.27       0.1            100000\n15 United Kingdom              0.8       0.24       0.09            90000\n16 Nepal                       0.5       0.15       0.06            60000\n17 Bangladesh                  0.5       0.15       0.06            60000\n18 Greece                      0.4       0.13       0.05            50000\n```\n\n\n:::\n\n```{.r .cell-code}\n# add a new column with a more accurate label for land area estimate (sq km)\ndf1 %>% \n  mutate(est.square.km = df1$area.sq.km * 1000000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 5\n   Country          percent.africa area.sq.km area.sq.mi est.square.km\n   <chr>                     <dbl>      <dbl>      <dbl>         <dbl>\n 1 United States              32.4       9.83       3.8        9830000\n 2 China                      31.6       9.6        3.71       9600000\n 3 India                      10.8       3.29       1.27       3290000\n 4 Mexico                      6.5       1.96       0.76       1960000\n 5 Peru                        4.2       1.29       0.5        1290000\n 6 France                      2.1       0.64       0.25        640000\n 7 Spain                       1.7       0.51       0.2         510000\n 8 Papua New Guinea            1.5       0.46       0.18        460000\n 9 Sweden                      1.5       0.45       0.17        450000\n10 Japan                       1.3       0.38       0.15        380000\n11 Germany                     1.2       0.36       0.14        360000\n12 Norway                      1.1       0.32       0.13        320000\n13 Italy                       1         0.3        0.12        300000\n14 New Zealand                 0.9       0.27       0.1         270000\n15 United Kingdom              0.8       0.24       0.09        240000\n16 Nepal                       0.5       0.15       0.06        150000\n17 Bangladesh                  0.5       0.15       0.06        150000\n18 Greece                      0.4       0.13       0.05        130000\n```\n\n\n:::\n:::\n\n\n\n\n#### Task 1.4.3b: Add new variables and remove old variables\n\nIt is easiest to put all of the verbs together in a single chunk of code.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove the old column; use the pipe command to do both operations at once\ndf1 %>%\n  mutate(est.square.miles = df1$area.sq.mi * 1000000) %>% \n  mutate(est.square.km = df1$area.sq.km * 1000000) %>% \n  select(-area.sq.mi, -area.sq.km) # remove the columns we do not want\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 4\n   Country          percent.africa est.square.miles est.square.km\n   <chr>                     <dbl>            <dbl>         <dbl>\n 1 United States              32.4          3800000       9830000\n 2 China                      31.6          3710000       9600000\n 3 India                      10.8          1270000       3290000\n 4 Mexico                      6.5           760000       1960000\n 5 Peru                        4.2           500000       1290000\n 6 France                      2.1           250000        640000\n 7 Spain                       1.7           200000        510000\n 8 Papua New Guinea            1.5           180000        460000\n 9 Sweden                      1.5           170000        450000\n10 Japan                       1.3           150000        380000\n11 Germany                     1.2           140000        360000\n12 Norway                      1.1           130000        320000\n13 Italy                       1             120000        300000\n14 New Zealand                 0.9           100000        270000\n15 United Kingdom              0.8            90000        240000\n16 Nepal                       0.5            60000        150000\n17 Bangladesh                  0.5            60000        150000\n18 Greece                      0.4            50000        130000\n```\n\n\n:::\n:::\n\n\n\n\nThese values seem to represent the data more clearly.\n\n### Task 1.4.4: Rename a column using `rename()`\n\nWe can also use `rename()` to modify a column's label.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 %>%\n  mutate(est.square.miles = df1$area.sq.mi * 1000000) %>% \n  mutate(est.square.km = df1$area.sq.km * 1000000) %>% \n  select(-area.sq.mi, -area.sq.km)  %>% \n  rename(country = Country)  # make the 'C' in country lowercase\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 4\n   country          percent.africa est.square.miles est.square.km\n   <chr>                     <dbl>            <dbl>         <dbl>\n 1 United States              32.4          3800000       9830000\n 2 China                      31.6          3710000       9600000\n 3 India                      10.8          1270000       3290000\n 4 Mexico                      6.5           760000       1960000\n 5 Peru                        4.2           500000       1290000\n 6 France                      2.1           250000        640000\n 7 Spain                       1.7           200000        510000\n 8 Papua New Guinea            1.5           180000        460000\n 9 Sweden                      1.5           170000        450000\n10 Japan                       1.3           150000        380000\n11 Germany                     1.2           140000        360000\n12 Norway                      1.1           130000        320000\n13 Italy                       1             120000        300000\n14 New Zealand                 0.9           100000        270000\n15 United Kingdom              0.8            90000        240000\n16 Nepal                       0.5            60000        150000\n17 Bangladesh                  0.5            60000        150000\n18 Greece                      0.4            50000        130000\n```\n\n\n:::\n:::\n\n\n\n\n### Task 1.4.5: Use `relocate()` to reorder the columns\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf1 %>%\n  mutate(est.square.miles = df1$area.sq.mi * 1000000) %>% \n  mutate(est.square.km = df1$area.sq.km * 1000000) %>% \n  select(-area.sq.mi, -area.sq.km)  %>% \n  rename(country = Country) %>% \n  relocate(country, percent.africa, est.square.miles) # reorder the columns\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 4\n   country          percent.africa est.square.miles est.square.km\n   <chr>                     <dbl>            <dbl>         <dbl>\n 1 United States              32.4          3800000       9830000\n 2 China                      31.6          3710000       9600000\n 3 India                      10.8          1270000       3290000\n 4 Mexico                      6.5           760000       1960000\n 5 Peru                        4.2           500000       1290000\n 6 France                      2.1           250000        640000\n 7 Spain                       1.7           200000        510000\n 8 Papua New Guinea            1.5           180000        460000\n 9 Sweden                      1.5           170000        450000\n10 Japan                       1.3           150000        380000\n11 Germany                     1.2           140000        360000\n12 Norway                      1.1           130000        320000\n13 Italy                       1             120000        300000\n14 New Zealand                 0.9           100000        270000\n15 United Kingdom              0.8            90000        240000\n16 Nepal                       0.5            60000        150000\n17 Bangladesh                  0.5            60000        150000\n18 Greece                      0.4            50000        130000\n```\n\n\n:::\n:::\n\n\n\n\n### Task 1.4.6: Overwrite your data frame\n\nNow that we've restructured the data into a format that is more accurate, we can reassign our data frame using the pipe operator. Take note of how the code is built with new commands starting on a new line and ending with the `%>%` operator.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrue_size_modified <- df1 %>%\n  mutate(est.square.miles = df1$area.sq.mi * 1000000) %>% \n  mutate(est.square.km = df1$area.sq.km * 1000000) %>% \n  select(-area.sq.mi, -area.sq.km)  %>% \n  rename(country = Country) %>% \n  relocate(country, percent.africa, est.square.miles) # reorder the columns\n```\n:::\n\n\n\n\nNow view your modified data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrue_size_modified\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 4\n   country          percent.africa est.square.miles est.square.km\n   <chr>                     <dbl>            <dbl>         <dbl>\n 1 United States              32.4          3800000       9830000\n 2 China                      31.6          3710000       9600000\n 3 India                      10.8          1270000       3290000\n 4 Mexico                      6.5           760000       1960000\n 5 Peru                        4.2           500000       1290000\n 6 France                      2.1           250000        640000\n 7 Spain                       1.7           200000        510000\n 8 Papua New Guinea            1.5           180000        460000\n 9 Sweden                      1.5           170000        450000\n10 Japan                       1.3           150000        380000\n11 Germany                     1.2           140000        360000\n12 Norway                      1.1           130000        320000\n13 Italy                       1             120000        300000\n14 New Zealand                 0.9           100000        270000\n15 United Kingdom              0.8            90000        240000\n16 Nepal                       0.5            60000        150000\n17 Bangladesh                  0.5            60000        150000\n18 Greece                      0.4            50000        130000\n```\n\n\n:::\n:::\n\n\n\n\n### Task 1.4.7: Explore `summarise()`, `arrange()`, and other verbs\n\nThere are other verbs in the `dplyr` package.\n\nFor example, we will use the `summarise()` and `arrange()` commands in the next part of the case study.\n\nYou can learn more about other `dplyr` data transformations [here](https://github.com/rstudio/cheatsheets/blob/main/data-transformation.pdf).\n\n------------------------------------------------------------------------\n\nNow that you have a few tools to explore and modify data frames, we return to the `africa_data_all` data in the `critstats` package. We will use this data frame to work more with `dplyr` and explore univariate analyses.\n\n------------------------------------------------------------------------\n\n# Preparing Case Study and Lab Reports\n\nLabs and case studies contain **Reports**. In this way, we have both *lab reports* and *case reports*.\n\nLab reports are for your own research papers. Case reports are for your exploratory work.\n\n**Reports**, as the name may suggest, are meant to help you report out your own workflow.\n\nDeveloping your own workflow is an important part of statistical analysis. Your workflow and reports should **not** be a `copy` and `paste` of the exact code outlined in a case study's examples. That said, most examples and the code used are specifically designed to help us move efficiently through the materials for this course.\n\nNote: The use of internet resources like `Chat GPT` are discouraged when generating code. If an assignment is submitted after using any AI assisted software, there may be an issue with plagiarism. All code for our course is self-contained, and it should not require that you search for long hours to find a solution; all solutions are somewhere on our course site!\n\n### Submission\n\nPlease complete the following reporting tasks for each part of the case study assignment.\n\nYou will submit your reports using what is called an *RMarkdown* file `(.Rmd)`.\n\nFor the case study, you should submit your reports to Canvas.\n\n------------------------------------------------------------------------\n\n# Part 1 Reports\n\n## Report 1.1\n\nWhat are some of the main concepts in [Vaughan (2018)](https://www.jstor.org/stable/j.ctv550dcj)? Could the data in the `true_size` data be used to respond to and advance our understanding of the concepts in Vaughan (2018)? If so, how might it be used to examine both the social context (period) and historical consequences (uses) of inequity in map making? If not, explain.\n\n## Report 1.2\n\nIf the data in `true_size_modified` is accurate, what is the expected correlation between the percent.africa and est.square.miles variables? Specifically, why do we get the below scatter plot based on the data values?\n\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](case02-pt1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n\n\n## Report 1.3\n\nBased on the original values in the `true_size` data, is there enough information to confirm if the claims about the size of Africa and the social politics of maps is true? Explain why or why not.\n\n## Report 1.4\n\nWrite code to add a new variable to the `true_size_modified` data called `proportion`.\n\nUse `mutate()` and arithmetic to generate the new variable.\n\nHint: If $Y$ = `proportion`, then $y_i = \\dfrac{x_i}{sum(x)}$ for some variable $X$ in data set.\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 18\nColumns: 5\n$ country          <chr> \"United States\", \"China\", \"India\", \"Mexico\", \"Peru\", …\n$ percent.africa   <dbl> 32.4, 31.6, 10.8, 6.5, 4.2, 2.1, 1.7, 1.5, 1.5, 1.3, …\n$ est.square.miles <dbl> 3800000, 3710000, 1270000, 760000, 500000, 250000, 20…\n$ est.square.km    <dbl> 9830000, 9600000, 3290000, 1960000, 1290000, 640000, …\n$ proportion       <dbl> 0.323679727, 0.316013629, 0.108177172, 0.064735945, 0…\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 5\n  country       percent.africa est.square.miles est.square.km proportion\n  <chr>                  <dbl>            <dbl>         <dbl>      <dbl>\n1 United States           32.4          3800000       9830000     0.324 \n2 China                   31.6          3710000       9600000     0.316 \n3 India                   10.8          1270000       3290000     0.108 \n4 Mexico                   6.5           760000       1960000     0.0647\n5 Peru                     4.2           500000       1290000     0.0426\n6 France                   2.1           250000        640000     0.0213\n```\n\n\n:::\n:::\n\n\n\n\nOverwrite `true_size_modified` with a new data framed titled `true_size_updated`.\n\nYou should be able to call the data as follows:\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrue_size_updated\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 18 × 5\n   country          percent.africa est.square.miles est.square.km proportion\n   <chr>                     <dbl>            <dbl>         <dbl>      <dbl>\n 1 United States              32.4          3800000       9830000    0.324  \n 2 China                      31.6          3710000       9600000    0.316  \n 3 India                      10.8          1270000       3290000    0.108  \n 4 Mexico                      6.5           760000       1960000    0.0647 \n 5 Peru                        4.2           500000       1290000    0.0426 \n 6 France                      2.1           250000        640000    0.0213 \n 7 Spain                       1.7           200000        510000    0.0170 \n 8 Papua New Guinea            1.5           180000        460000    0.0153 \n 9 Sweden                      1.5           170000        450000    0.0145 \n10 Japan                       1.3           150000        380000    0.0128 \n11 Germany                     1.2           140000        360000    0.0119 \n12 Norway                      1.1           130000        320000    0.0111 \n13 Italy                       1             120000        300000    0.0102 \n14 New Zealand                 0.9           100000        270000    0.00852\n15 United Kingdom              0.8            90000        240000    0.00767\n16 Nepal                       0.5            60000        150000    0.00511\n17 Bangladesh                  0.5            60000        150000    0.00511\n18 Greece                      0.4            50000        130000    0.00426\n```\n\n\n:::\n:::\n\n\n\n\n## Report 1.5\n\nTo confirm that you have generated the new variable and overwritten the data frame, create the plot below using the following code. Be sure to add your first name and last name in the quotes.\n\nThe code should be verbatim with the exception of your name.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(true_size_updated$proportion, true_size_updated$percent.africa)\ntitle(\"first.name last.name\") # Add your first name and last name\n```\n\n::: {.cell-output-display}\n![](case02-pt1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\nFor example, my code would read:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(true_size_updated$proportion, true_size_updated$percent.africa)\ntitle(\"Nathan Alexander\") # Add your first name and last name\n```\n\n::: {.cell-output-display}\n![](case02-pt1_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\nNotice the use of quotes when using `title()` under a plot.\n\nIf you experience issues making the plot, it is likely that you have made an error in the previous steps. Remember that R is case sensitive in all instances, and space sensitive in some instances.\n\nPlease be sure to go back and carefully check your code.\n\n\\Large{Save this plot as a `pdf` and submit it with case study files.\n\n# Experiencing issues?\n\nIf you experience issues executing your code, check the notes below.\n\nRemember that R is case sensitive in all instances, and space sensitive in some instances. Please be sure to go back and carefully check your code.\n\nIf you get the following error:\n\n`lazy-load database ‘…rdb’ is corrupt`\n\nTry the following method and re-install the package.\n\nRestart your R session by running `.rs.restartR()` in your RStudio Console.\n\nThe package might have been installed in your computer (even though it does not work). Remove it using `'`?remove.packages()`'`.\n\nDo not hesitate to contact me via email.\n",
    "supporting": [
      "case02-pt1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}