{
  "hash": "36e9924c7ee5cc98dd60b5a5d8014b3e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Case Study 2, Part 2: The True Size of Africa\"\nsubtitle: \"DATA 202 - Alexander\"\nformat: \n  html:\n    self-contained: true\n    self-contained-math: true\neditor: visual\n---\n\n\n\n\nIn Case Study 2, we will explore the social politics of maps and globally oriented data to help us make sense of what we mean by a \"population.\" The case study will integrate a series of new packages, functions, and code to support our explorations.\n\nThere are two parts to this case study, this is part 2.\n\n## Learning Objectives\n\nThis case study component will teach you how to use functions in `dplyr` to manipulate variables and data frames. You will also learn some base-R functions to conduct univariate analysis in the RStudio IDE.\n\n------------------------------------------------------------------------\n\n## Learning Activities\n\nBy the end of this case study you will be able to:\n\n1.  Install and/or update R packages\n2.  Assign data frames to different names for efficient exploration\n3.  Generate a set of outputs using the [`dplyr`](https://dplyr.tidyverse.org/) package\n4.  Overwrite a data frame while using the [pipe operator](https://style.tidyverse.org/pipes.html)\n5.  Produce simple plots using data located in an `R` package\n\n------------------------------------------------------------------------\n\n**Reminder**: Load lackages and libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install package\n# install.packages(\"tidyverse\", repos = \"http://cran.us.r-project.org\")\n# install.packages(\"remotes\", repos = \"http://cran.us.r-project.org\")\n \n# load the necessary libraries\nlibrary(tidyverse) #collection of R packages designed for data science\nlibrary(dplyr)\nlibrary(remotes)\n```\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n# Part 2: Univariate analysis\n\nIn this part of the case study, you will complete the following tasks:\n\n-   Examine the `africa_data_all` data in the `critstats` package\n\n    -- Create a table of the number of observations by year\n\n    -- Gather summary statistics for all variables by year\n\n    -- Create separate data frames for each year\n\n-   Compute univariate statistics for the year 2020 in `africa_data_all`\n\n## Task 2.1: Load the `africa_data_all` data\n\nThe `africa_data_all` data set will be used for instructional purposes only.\n\nThe data in this data frame was collected from the internet.\n\nThe data frame contains data on African countries and territories for two years: 2020 and 2023.\n\n### Task 2.1.1: Call the `africa_data_all` data\n\nWe begin by taking a look at the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncritstats::africa_data_all \n```\n:::\n\n\n\n\nWhat are some of your early observations?\n\n### Task 2.1.2: Inspect `africa_data_all` documentation\n\nThe documentation can help us get a better idea of the data frame's content.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n??critstats::africa_data_all \n```\n:::\n\n\n\n\nIf, by chance, you cannot load the documentation or experience issues with the `critstats` data package, you may need to restart your RStudio session.\n\n## Task 2.2: Prepare the `africa_data_all` data\n\nTo be efficient, we will only use specific functions to explore the data set.\n\nPlease note that there are many other approaches to exploration.\n\nThe approach taken below is one of many possibiliites.\n\n### Task 2.2.1: Assign `africa_data_all` to df2\n\nUse the assignment operator to assign the `africa_data_all` data frame to the object df2.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf2 <- critstats::africa_data_all\n```\n:::\n\n\n\n\nWe can now work more efficiently by typing `df2` when we want to call the data frame. Notice that I did not overwrite `df1` in the event you want to return to Part 1 of this case study.\n\n### Task 2.2.2: Inspect your data\n\nThe str() function displays the structure of R objects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [116 × 13] (S3: tbl_df/tbl/data.frame)\n $ country          : chr [1:116] \"Nigeria\" \"Ethiopia\" \"Egypt\" \"DR Congo\" ...\n $ pop              : num [1:116] 2.06e+08 1.15e+08 1.02e+08 8.96e+07 5.93e+07 ...\n $ pop.yearly.change: num [1:116] 2.58 2.57 1.94 3.19 1.28 2.98 2.28 3.32 1.85 2.42 ...\n $ pop.net.change   : num [1:116] 5175990 2884858 1946331 2770836 750420 ...\n $ density          : num [1:116] 226 115 103 40 49 67 94 229 18 25 ...\n $ area             : num [1:116] 910770 1000000 995450 2267050 1213090 ...\n $ migrants         : num [1:116] -60000 30000 -38033 23861 145405 ...\n $ fertility.rate   : num [1:116] 5.4 4.3 3.3 6 2.4 4.9 3.5 5 3.1 4.4 ...\n $ med.age          : num [1:116] 18 19 25 17 28 18 20 17 29 20 ...\n $ urban.pop        : num [1:116] 52 21 43 46 67 37 28 26 73 35 ...\n $ world.share      : num [1:116] 2.64 1.47 1.31 1.15 0.76 0.77 0.69 0.59 0.56 0.56 ...\n $ pop_in_mill      : num [1:116] 206.1 115 102.3 89.6 59.3 ...\n $ year             : num [1:116] 2020 2020 2020 2020 2020 2020 2020 2020 2020 2020 ...\n```\n\n\n:::\n:::\n\n\n\n\nUse `head()` to view the \"top\" of your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n  country           pop pop.yearly.change pop.net.change density   area migrants\n  <chr>           <dbl>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>\n1 Nigeria        2.06e8              2.58        5175990     226 9.11e5   -60000\n2 Ethiopia       1.15e8              2.57        2884858     115 1   e6    30000\n3 Egypt          1.02e8              1.94        1946331     103 9.95e5   -38033\n4 DR Congo       8.96e7              3.19        2770836      40 2.27e6    23861\n5 South Africa   5.93e7              1.28         750420      49 1.21e6   145405\n6 Tanzania       5.97e7              2.98        1728755      67 8.86e5   -40076\n# ℹ 6 more variables: fertility.rate <dbl>, med.age <dbl>, urban.pop <dbl>,\n#   world.share <dbl>, pop_in_mill <dbl>, year <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nUse `tail()` to view the \"bottom\" of your data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntail(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 13\n  country           pop pop.yearly.change pop.net.change density   area migrants\n  <chr>           <dbl>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>\n1 Cabo Verde     598682              0.93           5533     149   4030    -1227\n2 Western Sahara 587259              1.96          11273       2 266000     5600\n3 Mayotte        335995              3.03           9894     896    375        0\n4 Sao Tome & Pr… 231856              1.97           4476     242    960     -600\n5 Seychelles     107660              0.51            542     234    460     -200\n6 Saint Helena     5314             -1.12            -60      14    390        0\n# ℹ 6 more variables: fertility.rate <dbl>, med.age <dbl>, urban.pop <dbl>,\n#   world.share <dbl>, pop_in_mill <dbl>, year <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nView your data using the `view()` command.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(df2)\n```\n:::\n\n\n\n\nGet a summary of your data with `summary()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               pop            pop.yearly.change pop.net.change   \n Length:116         Min.   :     5314   Min.   :-1.120    Min.   :    -60  \n Class :character   1st Qu.:  2346300   1st Qu.: 1.567    1st Qu.:  46843  \n Mode  :character   Median : 12705220   Median : 2.400    Median : 320017  \n                    Mean   : 24147241   Mean   : 2.141    Mean   : 571374  \n                    3rd Qu.: 29236208   3rd Qu.: 2.732    3rd Qu.: 700895  \n                    Max.   :223804632   Max.   : 3.840    Max.   :5263420  \n                                                                           \n    density           area            migrants       fertility.rate \n Min.   :  2.0   Min.   :    375   Min.   :-174200   Min.   :1.400  \n 1st Qu.: 25.0   1st Qu.:  28120   1st Qu.: -10024   1st Qu.:3.150  \n Median : 64.0   Median : 269800   Median :  -4000   Median :4.100  \n Mean   :124.5   Mean   : 511181   Mean   :  -8680   Mean   :3.983  \n 3rd Qu.:137.2   3rd Qu.: 823290   3rd Qu.:   -100   3rd Qu.:4.700  \n Max.   :896.0   Max.   :2381740   Max.   : 168694   Max.   :7.000  \n                                   NA's   :1         NA's   :1      \n    med.age       urban.pop       world.share      pop_in_mill       \n Min.   :15.0   Min.   : 14.00   Min.   :0.0000   Min.   :  0.00531  \n 1st Qu.:18.0   1st Qu.: 35.00   1st Qu.:0.0300   1st Qu.:  2.34630  \n Median :19.0   Median : 46.00   Median :0.1600   Median : 12.70522  \n Mean   :21.3   Mean   : 49.15   Mean   :0.3048   Mean   : 24.14724  \n 3rd Qu.:22.5   3rd Qu.: 66.25   3rd Qu.:0.3650   3rd Qu.: 29.23621  \n Max.   :53.0   Max.   :100.00   Max.   :2.7800   Max.   :223.80463  \n NA's   :1                                                           \n      year     \n Min.   :2020  \n 1st Qu.:2020  \n Median :2022  \n Mean   :2022  \n 3rd Qu.:2023  \n Max.   :2023  \n               \n```\n\n\n:::\n:::\n\n\n\n\nTake note of the content and values of the data and its structure.\n\n## Task 2.3: Examine the data in detail\n\nBefore starting any analyses, we want to make sure we really understand our data.\n\nYou may have noticed that there is a `year` variable in the data set.\n\nSpecifically, the variable `year` separates the 2020 and 2023 data.\n\n### Task 2.3.1: Make a table of a single variable's contents\n\nTo examine how many data values are listed by year we can use `table()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a table of the number of observations by year\ntable(df2$year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n2020 2023 \n  58   58 \n```\n\n\n:::\n:::\n\n\n\n\nWe notice 58 values for each year. What does this say about our data?\n\n### Task 2.3.2: Gather summary statistics for the data by year\n\nThere are different ways to gather summary statistics by year.\n\nI can nest the request using some logic and the year 2020 as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(filter(df2, year == 2020))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               pop            pop.yearly.change pop.net.change   \n Length:58          Min.   :     6077   Min.   :0.170     Min.   :     18  \n Class :character   1st Qu.:  2257207   1st Qu.:1.555     1st Qu.:  47292  \n Mode  :character   Median : 12006992   Median :2.450     Median : 269752  \n                    Mean   : 23113761   Mean   :2.212     Mean   : 560930  \n                    3rd Qu.: 27404729   3rd Qu.:2.810     3rd Qu.: 667545  \n                    Max.   :206139589   Max.   :3.840     Max.   :5175990  \n                                                                           \n    density           area            migrants       fertility.rate \n Min.   :  2.0   Min.   :    375   Min.   :-174200   Min.   :1.400  \n 1st Qu.: 25.0   1st Qu.:  28680   1st Qu.: -10047   1st Qu.:3.300  \n Median : 61.5   Median : 269800   Median :  -4000   Median :4.400  \n Mean   :119.0   Mean   : 511181   Mean   :  -8124   Mean   :4.144  \n 3rd Qu.:131.5   3rd Qu.: 814062   3rd Qu.:      0   3rd Qu.:4.800  \n Max.   :728.0   Max.   :2381740   Max.   : 168694   Max.   :7.000  \n                                   NA's   :1         NA's   :1      \n    med.age        urban.pop       world.share      pop_in_mill       \n Min.   :15.00   Min.   : 14.00   Min.   :0.0000   Min.   :  0.00608  \n 1st Qu.:18.00   1st Qu.: 35.50   1st Qu.:0.0300   1st Qu.:  2.25721  \n Median :19.00   Median : 46.00   Median :0.1550   Median : 12.00699  \n Mean   :21.46   Mean   : 48.90   Mean   :0.2964   Mean   : 23.11376  \n 3rd Qu.:23.00   3rd Qu.: 63.75   3rd Qu.:0.3550   3rd Qu.: 27.40473  \n Max.   :37.00   Max.   :100.00   Max.   :2.6400   Max.   :206.13959  \n NA's   :1                                                            \n      year     \n Min.   :2020  \n 1st Qu.:2020  \n Median :2020  \n Mean   :2020  \n 3rd Qu.:2020  \n Max.   :2020  \n               \n```\n\n\n:::\n:::\n\n\n\n\nConsider why `filter(summary(df2, year == 2020))` returns an error.\n\nWe can also use the `%>%` operator to list the commands in order for 2020.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gather summary statistics for all variables for year == 2020\ndf2 %>% \n  filter(year == 2020) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               pop            pop.yearly.change pop.net.change   \n Length:58          Min.   :     6077   Min.   :0.170     Min.   :     18  \n Class :character   1st Qu.:  2257207   1st Qu.:1.555     1st Qu.:  47292  \n Mode  :character   Median : 12006992   Median :2.450     Median : 269752  \n                    Mean   : 23113761   Mean   :2.212     Mean   : 560930  \n                    3rd Qu.: 27404729   3rd Qu.:2.810     3rd Qu.: 667545  \n                    Max.   :206139589   Max.   :3.840     Max.   :5175990  \n                                                                           \n    density           area            migrants       fertility.rate \n Min.   :  2.0   Min.   :    375   Min.   :-174200   Min.   :1.400  \n 1st Qu.: 25.0   1st Qu.:  28680   1st Qu.: -10047   1st Qu.:3.300  \n Median : 61.5   Median : 269800   Median :  -4000   Median :4.400  \n Mean   :119.0   Mean   : 511181   Mean   :  -8124   Mean   :4.144  \n 3rd Qu.:131.5   3rd Qu.: 814062   3rd Qu.:      0   3rd Qu.:4.800  \n Max.   :728.0   Max.   :2381740   Max.   : 168694   Max.   :7.000  \n                                   NA's   :1         NA's   :1      \n    med.age        urban.pop       world.share      pop_in_mill       \n Min.   :15.00   Min.   : 14.00   Min.   :0.0000   Min.   :  0.00608  \n 1st Qu.:18.00   1st Qu.: 35.50   1st Qu.:0.0300   1st Qu.:  2.25721  \n Median :19.00   Median : 46.00   Median :0.1550   Median : 12.00699  \n Mean   :21.46   Mean   : 48.90   Mean   :0.2964   Mean   : 23.11376  \n 3rd Qu.:23.00   3rd Qu.: 63.75   3rd Qu.:0.3550   3rd Qu.: 27.40473  \n Max.   :37.00   Max.   :100.00   Max.   :2.6400   Max.   :206.13959  \n NA's   :1                                                            \n      year     \n Min.   :2020  \n 1st Qu.:2020  \n Median :2020  \n Mean   :2020  \n 3rd Qu.:2020  \n Max.   :2020  \n               \n```\n\n\n:::\n:::\n\n\n\n\nWe can use the same commands to filter the data for 2023.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# gather summary statistics for all variables for year == 2023\ndf2 %>% \n  filter(year == 2023) %>% \n  summary()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               pop            pop.yearly.change pop.net.change   \n Length:58          Min.   :     5314   Min.   :-1.120    Min.   :    -60  \n Class :character   1st Qu.:  2478468   1st Qu.: 1.580    1st Qu.:  45111  \n Mode  :character   Median : 13475694   Median : 2.300    Median : 324628  \n                    Mean   : 25180720   Mean   : 2.071    Mean   : 581818  \n                    3rd Qu.: 29962558   3rd Qu.: 2.667    3rd Qu.: 702468  \n                    Max.   :223804632   Max.   : 3.800    Max.   :5263420  \n    density            area            migrants       fertility.rate \n Min.   :  2.00   Min.   :    375   Min.   :-126181   Min.   :1.400  \n 1st Qu.: 27.25   1st Qu.:  28680   1st Qu.: -10000   1st Qu.:2.825  \n Median : 65.50   Median : 269800   Median :  -4000   Median :3.900  \n Mean   :130.05   Mean   : 511181   Mean   :  -9228   Mean   :3.824  \n 3rd Qu.:143.50   3rd Qu.: 814062   3rd Qu.:   -300   3rd Qu.:4.375  \n Max.   :896.00   Max.   :2381740   Max.   :  58496   Max.   :6.700  \n    med.age        urban.pop      world.share      pop_in_mill       \n Min.   :15.00   Min.   :15.00   Min.   :0.0000   Min.   :  0.00531  \n 1st Qu.:17.00   1st Qu.:35.50   1st Qu.:0.0300   1st Qu.:  2.47847  \n Median :19.00   Median :46.00   Median :0.1650   Median : 13.47569  \n Mean   :21.14   Mean   :49.40   Mean   :0.3133   Mean   : 25.18072  \n 3rd Qu.:22.00   3rd Qu.:66.75   3rd Qu.:0.3750   3rd Qu.: 29.96256  \n Max.   :53.00   Max.   :95.00   Max.   :2.7800   Max.   :223.80463  \n      year     \n Min.   :2023  \n 1st Qu.:2023  \n Median :2023  \n Mean   :2023  \n 3rd Qu.:2023  \n Max.   :2023  \n```\n\n\n:::\n:::\n\n\n\n\n## Task 2.4: Get univariate statistics\n\nTo help advance our understanding of statistical analyses in the RStudio IDE, we will lean a few tasks to compute univariate statistics. You are likely familiar with univariate statistics. Univariate statistics are statistics done on a single variable. Some base R functions for univariate statistics are as follows:\n\n-   `mean()` returns the mean of a single numeric variable\n\n-   `median()` returns the middle value of a single numeric variable\n\n-   `mode()` returns the variable type for the mode of a single variable\n\n-   `table()` returns a frequency table with counts of each level for a single variable\n\n-   `max()` returns the maximum value of a single numeric variable\n\n-   `min()` returns the minimum value of a single numeric variable\n\n-   `range()` returns the `min()` and `max()` values of a single numeric variable\n\n-   `IQR()` returns the interquartile range values for a single numeric variable\n\n-   `sd()` returns the standard deviation for a single numeric variable\n\n-   `boxplot()` returns a boxplot of a numeric variable or variables\n\n-   `hist()` returns a histogram of a single numeric variable\n\n-   `stem()` provides a stem-and-leaf plot when a single numeric variable is input.\n\n-   `plot()` provides a scatter plot of data values by its index, $i$.\n\n-   `plot(density())` provides a density plot of a single numeric variable\n\nEach of the above functions provides a different perspective on the distribution of values for a single variable.\n\n### Task 2.4.1: Inspect data prior to analysis\n\nFrom our earlier observations, we see that the `africa_data_all` (`df2`) contains data across two years: 2020 and 2023. Let's use pipes `%>%` to create separate data from for each year.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a separate data frame for 2020\ndata_2020 <- df2 %>% \n  filter(year == 2020)\n\ndata_2020 # view the data for 2020\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 58 × 13\n   country          pop pop.yearly.change pop.net.change density   area migrants\n   <chr>          <dbl>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>\n 1 Nigeria       2.06e8              2.58        5175990     226 9.11e5   -60000\n 2 Ethiopia      1.15e8              2.57        2884858     115 1   e6    30000\n 3 Egypt         1.02e8              1.94        1946331     103 9.95e5   -38033\n 4 DR Congo      8.96e7              3.19        2770836      40 2.27e6    23861\n 5 South Africa  5.93e7              1.28         750420      49 1.21e6   145405\n 6 Tanzania      5.97e7              2.98        1728755      67 8.86e5   -40076\n 7 Kenya         5.38e7              2.28        1197323      94 5.69e5   -10000\n 8 Uganda        4.57e7              3.32        1471413     229 2.00e5   168694\n 9 Algeria       4.39e7              1.85         797990      18 2.38e6   -10000\n10 Sudan         4.38e7              2.42        1036022      25 1.77e6   -50000\n# ℹ 48 more rows\n# ℹ 6 more variables: fertility.rate <dbl>, med.age <dbl>, urban.pop <dbl>,\n#   world.share <dbl>, pop_in_mill <dbl>, year <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nIt is not clear that this data is for 2020. As a result, we can reorganize the columns and overwrite the data frame.\n\nI am moving the `year` variable to the second position in the data frame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_2020 <- df2 %>% \n  filter(year == 2020) %>% \n  relocate(country, year)\n\ndata_2020 # view the data for 2020\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 58 × 13\n   country  year    pop pop.yearly.change pop.net.change density   area migrants\n   <chr>   <dbl>  <dbl>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>\n 1 Nigeria  2020 2.06e8              2.58        5175990     226 9.11e5   -60000\n 2 Ethiop…  2020 1.15e8              2.57        2884858     115 1   e6    30000\n 3 Egypt    2020 1.02e8              1.94        1946331     103 9.95e5   -38033\n 4 DR Con…  2020 8.96e7              3.19        2770836      40 2.27e6    23861\n 5 South …  2020 5.93e7              1.28         750420      49 1.21e6   145405\n 6 Tanzan…  2020 5.97e7              2.98        1728755      67 8.86e5   -40076\n 7 Kenya    2020 5.38e7              2.28        1197323      94 5.69e5   -10000\n 8 Uganda   2020 4.57e7              3.32        1471413     229 2.00e5   168694\n 9 Algeria  2020 4.39e7              1.85         797990      18 2.38e6   -10000\n10 Sudan    2020 4.38e7              2.42        1036022      25 1.77e6   -50000\n# ℹ 48 more rows\n# ℹ 5 more variables: fertility.rate <dbl>, med.age <dbl>, urban.pop <dbl>,\n#   world.share <dbl>, pop_in_mill <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nWe can run the same functions for `year == 2023`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a separate data frame for 2023\ndata_2023 <- df2 %>% \n  filter(year == 2023) %>% \n  relocate(country, year)\n\ndata_2023 # view the data for 2023\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 58 × 13\n   country  year    pop pop.yearly.change pop.net.change density   area migrants\n   <chr>   <dbl>  <dbl>             <dbl>          <dbl>   <dbl>  <dbl>    <dbl>\n 1 Nigeria  2023 2.24e8              2.41        5263420     246 9.11e5   -59996\n 2 Ethiop…  2023 1.27e8              2.55        3147136     127 1   e6   -11999\n 3 Egypt    2023 1.13e8              1.56        1726495     113 9.95e5   -29998\n 4 DR Con…  2023 1.02e8              3.29        3252596      45 2.27e6   -14999\n 5 Tanzan…  2023 6.74e7              2.96        1940358      76 8.86e5   -39997\n 6 South …  2023 6.04e7              0.87         520610      50 1.21e6    58496\n 7 Kenya    2023 5.51e7              1.99        1073099      97 5.69e5   -10000\n 8 Sudan    2023 4.81e7              2.63        1234802      27 1.77e6    -9999\n 9 Uganda   2023 4.86e7              2.82        1332749     243 2.00e5  -126181\n10 Algeria  2023 4.56e7              1.57         703255      19 2.38e6    -9999\n# ℹ 48 more rows\n# ℹ 5 more variables: fertility.rate <dbl>, med.age <dbl>, urban.pop <dbl>,\n#   world.share <dbl>, pop_in_mill <dbl>\n```\n\n\n:::\n:::\n\n\n\n\nIt is now clearer which year we are loading when we view the data frames.\n\n### Task 2.4.1a: Check for missing data\n\nWe can check the entire data frame for missing values using `is.na()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(data_2020)\n\nis.na(data_2023)\n```\n:::\n\n\n\n\nYou can see that this output is far too extensive.\n\nWe should check for missing values for a specific variable first.\n\nLet's use the `migrants` variable in the `df2` data frame by inserting `df2$migrants`.\n\nThe code to check for missing values in the 2020 data frame for the variable `migrant` is as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.na(data_2020$migrants)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n\n\n\nNotice that there is a missing value for the variable `migrant` in the 2020 data.\n\nIt may be important to see the total number of missing values in the data frame. We can check the number of missing values for each variable using `sapply()`. The `sapply()` is a base-R function and it is used for different purposes. Here is an example:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsapply(data_2020, function(x) sum(is.na(x)))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          country              year               pop pop.yearly.change \n                0                 0                 0                 0 \n   pop.net.change           density              area          migrants \n                0                 0                 0                 1 \n   fertility.rate           med.age         urban.pop       world.share \n                1                 1                 0                 0 \n      pop_in_mill \n                0 \n```\n\n\n:::\n:::\n\n\n\n\n`sapply()` is a loop function and the above code iterates the function for each variable in the `df2` data set.\n\nThe logic of the function is `sapply(data, FUNction...)`.\n\nFrom the output, we notice that a few different variables have a missing value.\n\nYou can use the `view()` function to take a closer look at the data to find the missing values.\n\nWhat do you notice about the source of the missing values when using `view()`?\n\n### Task 2.4.1b: Working with missing values\n\nIn class, we will learn how to deal with missing values. For now, you can remove missing values using the code below or select those variables that has no missing values for your case study reports.\n\nWhen conducting univariate statistics, we can simply tell R to ignore missing values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# mean returns `NA` since there are missing values\nmean(data_2020$migrants)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\nUse `na.rm = TRUE` to remove missing values from a numeric variable\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# instruct R to remove missing values from the analysis using `\nmean(data_2020$migrants, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -8123.684\n```\n\n\n:::\n:::\n\n\n\n\nThere are some exceptions here and it relates to the type of variable being used. We'll explore missing values in class.\n\n------------------------------------------------------------------------\n\nFor our next set of tasks, we will focus on variables in the `data_2020` data frame.\n\nRecall that `data_2020` was used as a label for `africa_data_all` when `year == 2020`.\n\n### Task 2.4.2: `mean()`\n\nThe `mean()` function returns the mean of a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the average population in 2020\nmean(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 23113761\n```\n\n\n:::\n\n```{.r .cell-code}\n# find the average percent urban population in 2020\nmean(data_2020$urban.pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 48.89655\n```\n\n\n:::\n\n```{.r .cell-code}\n# find the average of median age in 2020\nmean(data_2020$med.age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] NA\n```\n\n\n:::\n:::\n\n\n\n\nNotice that the last command returns `NA` due to missing values.\n\nWe can correct this by using `na.rm = TRUE`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# check to see missing data in the variable\nis.na(data_2020$med.age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[25] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[37] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE\n[49] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\n# compute the mean using the na.rm = TRUE\nmean(data_2020$med.age, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 21.45614\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.3: `median()`\n\nThe `median()` function returns the middle value of a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 12006992\n```\n\n\n:::\n:::\n\n\n\n\nWe can also use pipe operators to filter the countries that are above and below the `median` values.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# filter data to show countries that are below the median\ndata_2020 %>% \n  filter(pop < median(pop)) %>% \n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 × 2\n   country                       pop\n   <chr>                       <dbl>\n 1 Tunisia                  11818619\n 2 Burundi                  11890784\n 3 South Sudan              11193725\n 4 Togo                      8278724\n 5 Sierra Leone              7976983\n 6 Libya                     6871292\n 7 Congo                     5518087\n 8 Liberia                   5057681\n 9 Central African Republic  4829767\n10 Mauritania                4649658\n# ℹ 19 more rows\n```\n\n\n:::\n\n```{.r .cell-code}\n# filter data to show countries that are above the median\ndata_2020 %>% \n  filter(pop > median(pop)) %>% \n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 29 × 2\n   country            pop\n   <chr>            <dbl>\n 1 Nigeria      206139589\n 2 Ethiopia     114963588\n 3 Egypt        102334404\n 4 DR Congo      89561403\n 5 South Africa  59308690\n 6 Tanzania      59734218\n 7 Kenya         53771296\n 8 Uganda        45741007\n 9 Algeria       43851044\n10 Sudan         43849260\n# ℹ 19 more rows\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.4: `mode()` and `table()`\n\nThe `mode()` function returns the variable type for the mode of a single variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# what does this output tell us about the mode of the med.age variable?\nmode(data_2020$med.age) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n\n\n\nWe can use the `table()` function to get our mode.\n\nThe `table()` function returns a frequency table with counts of each level for a single variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# what does this updated output tell us about the mode of the med.age variable?\ntable(data_2020$med.age) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 33 34 36 37 \n 1  1  6  9 14  7  1  3  1  2  1  1  3  2  1  1  1  1  1 \n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.5: `max()` and `min()`\n\nThe `max()` function returns the maximum value of a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the maximum value\nmax(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 206139589\n```\n\n\n:::\n\n```{.r .cell-code}\n# use pipes to gather details about which country or territory has the max value\ndata_2020 %>% \n  filter(pop == max(pop)) %>% \n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  country       pop\n  <chr>       <dbl>\n1 Nigeria 206139589\n```\n\n\n:::\n:::\n\n\n\n\nThe `min()` function returns the minimum value of a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the minimum value\nmin(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6077\n```\n\n\n:::\n\n```{.r .cell-code}\n# use pipes to gather details about which country or territory has the min value\ndata_2020 %>% \n  filter(pop == min(pop)) %>% \n  select(country, pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 2\n  country        pop\n  <chr>        <dbl>\n1 Saint Helena  6077\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.6: `range()`\n\nThe `range()` function returns the min() and max() values of a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]      6077 206139589\n```\n\n\n:::\n:::\n\n\n\n\nHowever, we can manually compute the `range` by using arithmetic with our functions.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# generate a new variable call population range that is the maximum minus the minimum value\npop_range_2020 <- max(data_2020$pop) - min(data_2020$pop)\npop_range_2020 # we must call the object back to see its value\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 206133512\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.7: `IQR()`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the IQR for the 2020 population variable\nIQR(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 25147522\n```\n\n\n:::\n\n```{.r .cell-code}\n# find the IQR for the 2020 percent urban population variable\nIQR(data_2020$urban.pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 28.25\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.8: `sd()`\n\nThe `sd()` function returns the standard deviation for a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# find the standard deviation of the 2020 population variable\nsd(data_2020$pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 35061685\n```\n\n\n:::\n\n```{.r .cell-code}\n# find the standard deviation of the 2020 urban population variable\nsd(data_2020$urban.pop)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 19.83501\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.4.8: Use `summary()`\n\nThe `summary()` function is often more efficient for a quick check of univariate statistics.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(data_2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   country               year           pop            pop.yearly.change\n Length:58          Min.   :2020   Min.   :     6077   Min.   :0.170    \n Class :character   1st Qu.:2020   1st Qu.:  2257207   1st Qu.:1.555    \n Mode  :character   Median :2020   Median : 12006992   Median :2.450    \n                    Mean   :2020   Mean   : 23113761   Mean   :2.212    \n                    3rd Qu.:2020   3rd Qu.: 27404729   3rd Qu.:2.810    \n                    Max.   :2020   Max.   :206139589   Max.   :3.840    \n                                                                        \n pop.net.change       density           area            migrants      \n Min.   :     18   Min.   :  2.0   Min.   :    375   Min.   :-174200  \n 1st Qu.:  47292   1st Qu.: 25.0   1st Qu.:  28680   1st Qu.: -10047  \n Median : 269752   Median : 61.5   Median : 269800   Median :  -4000  \n Mean   : 560930   Mean   :119.0   Mean   : 511181   Mean   :  -8124  \n 3rd Qu.: 667545   3rd Qu.:131.5   3rd Qu.: 814062   3rd Qu.:      0  \n Max.   :5175990   Max.   :728.0   Max.   :2381740   Max.   : 168694  \n                                                     NA's   :1        \n fertility.rate     med.age        urban.pop       world.share    \n Min.   :1.400   Min.   :15.00   Min.   : 14.00   Min.   :0.0000  \n 1st Qu.:3.300   1st Qu.:18.00   1st Qu.: 35.50   1st Qu.:0.0300  \n Median :4.400   Median :19.00   Median : 46.00   Median :0.1550  \n Mean   :4.144   Mean   :21.46   Mean   : 48.90   Mean   :0.2964  \n 3rd Qu.:4.800   3rd Qu.:23.00   3rd Qu.: 63.75   3rd Qu.:0.3550  \n Max.   :7.000   Max.   :37.00   Max.   :100.00   Max.   :2.6400  \n NA's   :1       NA's   :1                                        \n  pop_in_mill       \n Min.   :  0.00608  \n 1st Qu.:  2.25721  \n Median : 12.00699  \n Mean   : 23.11376  \n 3rd Qu.: 27.40473  \n Max.   :206.13959  \n                    \n```\n\n\n:::\n:::\n\n\n\n\nNot, however, the values that `summary()` returns and those that it does not. While the function can be used to be more efficient, it should not replace a thorough inspection of your data. We will discuss this more in exploratory data anlaysis.\n\n## Task 2.5: Create basic plots\n\n### Task 2.5.1: `boxplot()`\n\n`boxplot()` returns a box plot of a numeric variable or variables.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxplot(data_2020$pop)\n```\n\n::: {.cell-output-display}\n![](case02-pt2_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n### Task 2.5.2: `hist()`\n\n`hist()` returns a histogram of a single numeric variable.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(data_2020$pop)\n```\n\n::: {.cell-output-display}\n![](case02-pt2_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\n### Task 2.5.3: `stem()`\n\n`stem()` provides a stem-and-leaf plot when a single numeric variable is input.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstem(data_2020$med.age)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n  The decimal point is at the |\n\n  14 | 0\n  16 | 0000000\n  18 | 00000000000000000000000\n  20 | 00000000\n  22 | 0000\n  24 | 000\n  26 | 0\n  28 | 00000\n  30 | 0\n  32 | 0\n  34 | 0\n  36 | 00\n```\n\n\n:::\n:::\n\n\n\n\n### Task 2.5.4: `plot()`\n\n`plot()` provides a scatter plot of data values by its index, $i$.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(data_2020$med.age)\n```\n\n::: {.cell-output-display}\n![](case02-pt2_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n### Task 2.5.5: `plot(density())`\n\n`plot(density())` provides a density plot of a single numeric variable\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(density(data_2020$pop))\n```\n\n::: {.cell-output-display}\n![](case02-pt2_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n------------------------------------------------------------------------\n\n# Preparing Case Study and Lab Reports\n\nLabs and case studies contain **Reports**. In this way, we have both *lab reports* and *case reports*.\n\nLab reports are for your own research papers. Case reports are for your exploratory work.\n\n**Reports**, as the name may suggest, are meant to help you report out your own workflow.\n\nDeveloping your own workflow is an important part of statistical analysis. Your workflow and reports should **not** be a `copy` and `paste` of the exact code outlined in a case study's examples. That said, most examples and the code used are specifically designed to help us move efficiently through the materials for this course.\n\nNote: The use of internet resources like `Chat GPT` are discouraged when generating code. If an assignment is submitted after using any AI assisted software, there may be an issue with plagiarism. All code for our course is self-contained, and it should not require that you search for long hours to find a solution; all solutions are somewhere on our course site!\n\n### Submission\n\nPlease complete the following reporting tasks for each part of the case study assignment.\n\nYou will submit your reports using the *RMarkdown* file `(.Rmd)` format.\n\nFor the case study, you should submit your reports to Canvas.\n\n------------------------------------------------------------------------\n\n# Part 2 Reports\n\n## Report 1.6\n\nState each variable and variable type in the `africa_data_all` data frame.\n\nWhat code provides us with the requested information most efficiently?\n\n## Report 1.7\n\nWhy does `filter(summary(df2, year == 2020))` return an error?\n\nRecall that `df2` was used as a label for `africa_data_all`.\n\n## Report 1.8\n\nWhen using `view(data_2020)` after running the `sapply(data_2020, function(x) sum(is.na(x)))`, what do you notice? Specifically, what country (or territory) is the source of the missing data values?\n\nRecall that `data_2020` was used as a label for `africa_data_all` when `year == 2020`.\n\n## Report 1.9\n\nCompute univariate statistics for two numeric variables in `africa_data_all` for `year == 2023`.\n\nUnivariate statistics for each variable should include: `mean()`, `median()`, a method to find the `mode` of the varaible, if it exists, `max()` and `min()`, a method to find the `range` of the varaible, `IQR()`, and `sd()`.\n\n## Report 1.10\n\nCreate basic plots (i.e., `boxplot()`, `hist()`, `plot()`, and `plot(density())`) for the two numeric variables that you used in Report 1.9 (above). Add a title to each plot.\n\n\\Large{Save each plot in your directory}.\n\n# Experiencing issues?\n\nIf you experience issues executing your code, check the notes below.\n\nRemember that R is case sensitive in all instances, and space sensitive in some instances. Please be sure to go back and carefully check your code.\n\nIf you get the following error:\n\n`lazy-load database ‘…rdb’ is corrupt`\n\nTry the following method and re-install the package.\n\nRestart your R session by running `.rs.restartR()` in your RStudio Console.\n\nThe package might have been installed in your computer (even though it does not work). Remove it using `'`?remove.packages()`'`.\n\nDo not hesitate to contact me via email.\n",
    "supporting": [
      "case02-pt2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}